(self.webpackChunkdsa_visualisation=self.webpackChunkdsa_visualisation||[]).push([[259],{3259:(t,n,e)=>{"use strict";e.r(n),e.d(n,{ProblemSolvingModule:()=>c});var r=e(8583),o=e(701),s=e(8720),a=e(9931);const i=[{path:"",pathMatch:"full",redirectTo:"string"},{path:"string",component:(()=>{class t{constructor(t){this.highLightCode=t,this.stringTips='<h2>String problem-solving tips</h2>\n<p> <strong>Note:</strong> The ASCII values of the alphabet vary from <strong>65 to 90</strong> for <strong>uppercase letters</strong> and from <strong>97 to 122</strong> for <strong>lowercase letters</strong>.</p>\n<h3>Useful build-in string operations methods</h3>\n<ol>\n<li><p><strong>concat()</strong>: This method is used to concatenate one or more strings. It takes one or more strings as arguments and returns a new string that is the concatenation of the original string(s) and the argument(s).</p>\n\n<pre><code class="language-javascript">\n    let str1 = &quot;Hello&quot;;\n    let str2 = &quot;World&quot;;\n    let result = str1.concat(&quot; &quot;, str2);\n    console.log(result); // Output: Hello World\n\n</code></pre>\n</li>\n<li><p><strong>charAt()</strong>: This method returns the character at a specified index in a string. It takes an index as an argument and returns the character at that index.</p>\n\n<pre><code class="language-javascript">\n    let str = &quot;Hello&quot;;\n    console.log(str.charAt(0)); // Output: H\n    console.log(str.charAt(3)); // Output: l\n\n</code></pre>\n</li>\n<li><p><strong>substring()</strong>: This method returns the part of the string between the specified start and end indexes. It takes one or two arguments: the start index and the end index.</p>\n\n<pre><code class="language-javascript">\n    let str = &quot;Hello World&quot;;\n    console.log(str.substring(6)); // Output: World\n    console.log(str.substring(0, 5)); // Output: Hello\n\n</code></pre>\n</li>\n<li><p><strong>slice()</strong>: This method extracts a section of a string and returns it as a new string. It takes one or two arguments: the start index and optionally the end index.</p>\n\n<pre><code class="language-javascript">\n    let str = &quot;Hello World&quot;;\n    console.log(str.slice(6)); // Output: World\n    console.log(str.slice(0, 5)); // Output: Hello\n\n</code></pre>\n</li>\n<li><p><strong>toUpperCase() / toLowerCase()</strong>: These methods return the string in uppercase or lowercase letters, respectively.</p>\n\n<pre><code class="language-javascript">\n    let str = &quot;Hello World&quot;;\n    console.log(str.toUpperCase()); // Output: HELLO WORLD\n    console.log(str.toLowerCase()); // Output: hello world\n\n</code></pre>\n</li>\n<li><p><strong>indexOf() / lastIndexOf()</strong>: These methods return the index of the first/last occurrence of a specified value in a string.</p>\n\n<pre><code class="language-javascript">\n    let str = &quot;Hello World&quot;;\n    console.log(str.indexOf(&quot;o&quot;)); // Output: 4\n    console.log(str.lastIndexOf(&quot;o&quot;)); // Output: 7\n\n</code></pre>\n</li>\n<li><p><strong>replace()</strong>: This method replaces a specified value with another value in a string.</p>\n\n<pre><code class="language-javascript">\n    let str = &quot;Hello World&quot;;\n    console.log(str.replace(&quot;World&quot;, &quot;Universe&quot;)); // Output: Hello Universe\n\n</code></pre>\n</li>\n<li><p><strong>charCodeAt()</strong>: This method returns the Unicode value of the character at a specified index in a string.</p>\n\n<pre><code class="language-javascript">\n    let text = &quot;Hello&quot;;\n    let code = text.charCodeAt(0);\n    console.log(code); // Output: 72 (Unicode value of &#39;H&#39;)\n\n</code></pre>\n</li>\n<li><p><strong>fromCharCode()</strong>: This method returns a string created from the specified sequence of Unicode values.</p>\n\n<pre><code class="language-javascript">\n    let char = String.fromCharCode(65);\n    console.log(char); // Output: A\n\n</code></pre>\n</li>\n<li><p><strong>split()</strong>: This method is used to split a string into an array of substrings based on a specified separator.</p>\n<pre><code class="language-javascript">\n    let str = &quot;apple,banana,orange&quot;;\n    let arr = str.split(&quot;,&quot;);\n    console.log(arr); // Output: [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;]\n\n</code></pre>\n</li>\n</ol>\n\n<h3>Reverse a string:</h3>\n\n<p>Here&#39;s a simple JavaScript function to reverse a string:</p>\n<pre><code class="language-javascript">\n    function reverseString(str) {\n       return str.split(&quot;&quot;).reverse().join(&quot;&quot;);\n   }\n\n    let originalString = &quot;Hello&quot;;\n    let reversedString = reverseString(originalString);\n    console.log(reversedString); // Output: &quot;olleH&quot;\n\n</code></pre>\n<h3>To find how many times a substring appears in a string</h3>\n<p>A function that takes a string and a substring, and returns the number of times the substring appears within the string:</p>\n<pre><code class="language-javascript">\n    function countSubstring(str, subStr) {\n        // Calculate the length difference between the \n        // original string and the string after removing all occurrences of the substring\n        return (str.length - str.split(subStr).join(&#39;&#39;).length) / subStr.length;\n    }\n\n    // Example usage:\n    let mainString = &quot;0101010101&quot;;\n    let subString = &quot;010&quot;;\n    let count = countSubstring(mainString, subString);\n    console.log(count); // Output: 2\n\n</code></pre>\n\n<h3>Palindrome operation</h3>\n\n<pre><code class="language-javascript">\n    s.split(&quot;&quot;) // Convert the string s into an array of characters\n    .slice(Math.ceil(s.length / 2)) // Get the second half of the array\n    .reverse() // Reverse the order of the characters in the second half\n    .map((v, i) =&gt; { \n        //return Math.abs(s.charCodeAt(i) - v.charCodeAt(0));\n        // write your logic here\n    })\n\n</code></pre>\n\n<h3>Whether a given string can be rearranged into a palindrome.</h3>\n<p><strong>Note:</strong> A string can be made into a palindrome if it has at most one character that occurs an odd number of times</p>\n<pre><code class="language-javascript">\n    function canBePalindrome(str) {\n        // Create a frequency map to count occurrences of characters\n        const frequencyMap = new Map();\n        \n        // Count occurrences of each character in the string\n        for (let char of str) {\n            if (frequencyMap.has(char)) {\n                frequencyMap.set(char, frequencyMap.get(char) + 1);\n            } else {\n                frequencyMap.set(char, 1);\n            }\n        }\n        \n        // Count how many characters occur an odd number of times\n        let oddCount = 0;\n        for (let count of frequencyMap.values()) {\n            if (count % 2 !== 0) {\n                oddCount++;\n            }\n        }\n        \n        // A string can be made into a palindrome if it has at most one character that occurs an odd number of times\n        return oddCount &lt;= 1;\n    }\n\n</code></pre>\n'}ngOnInit(){}ngAfterViewInit(){this.highLightCode.highlightAll()}}return t.\u0275fac=function(n){return new(n||t)(s.Y36(a.l))},t.\u0275cmp=s.Xpm({type:t,selectors:[["app-string-problem"]],decls:1,vars:1,consts:[[3,"innerHTML"]],template:function(t,n){1&t&&s._UZ(0,"div",0),2&t&&s.Q6J("innerHTML",n.stringTips,s.oJD)},styles:[""]}),t})()}];let l=(()=>{class t{}return t.\u0275fac=function(n){return new(n||t)},t.\u0275mod=s.oAB({type:t}),t.\u0275inj=s.cJS({imports:[[o.Bz.forChild(i)],o.Bz]}),t})(),c=(()=>{class t{}return t.\u0275fac=function(n){return new(n||t)},t.\u0275mod=s.oAB({type:t}),t.\u0275inj=s.cJS({imports:[[r.ez,l]]}),t})()}}]);