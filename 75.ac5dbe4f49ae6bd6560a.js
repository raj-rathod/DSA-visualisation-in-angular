(self.webpackChunkdsa_visualisation=self.webpackChunkdsa_visualisation||[]).push([[75],{5075:(t,e,a)=>{"use strict";a.r(e),a.d(e,{DynamicProgrammingModule:()=>p});var o=a(8583),i=a(701),s=a(1077);const n={defination:s.W.setHeader("Dynamic Programming is a technique in computer programming that helps to efficiently solve a class of problems that have overlapping subproblems and optimal substructure property"),characteristics:s.W.setListwithTitleHtml("Characteristics of Dynamic Programming",["<b>Optimal Substructure</b>:  A given problem has Optimal Substructure Property if the optimal solution of the given problem can be obtained by using optimal solutions of its subproblems<br> For example, the Shortest Path problem has the following optimal substructure property: <br> If a node x lies in the shortest path from a source node u to destination node v then the shortest path from u to v is a combination of the shortest path from u to x and the shortest path from x to v. The standard All Pair Shortest Path algorithm like Floyd\u2013Warshall and Single Source Shortest path algorithm for negative weight edges like Bellman\u2013Ford are typical examples of Dynamic Programming","<b>Overlapping Subproblems</b>:  Like Divide and Conquer, Dynamic Programming combines solutions to sub-problems. Dynamic Programming is mainly used when solutions to the same subproblems are needed again and again. In dynamic programming, computed solutions to subproblems are stored in a table so that these don\u2019t have to be recomputed. So Dynamic Programming is not useful when there are no common (overlapping) subproblems because there is no point in storing the solutions if they are not needed again"]),terminologies:s.W.setListwithTitleHtml("Tabulation and Memoization",["<b>Tabulation Method \u2013 Bottom Up Dynamic Programming</b>: As the name itself suggests starting from the bottom and accumulating answers to the top. Let\u2019s discuss in terms of state transition.<br>Let\u2019s describe a state for our DP problem to be dp[x] with dp[0] as base state and dp[n] as our destination state. So,  we need to find the value of destination state i.e dp[n]. If we start our transition from our base state i.e dp[0] and follow our state transition relation to reach our destination state dp[n], we call it the Bottom-Up approach as it is quite clear that we started our transition from the bottom base state and reached the topmost desired state","<b>Memoization Method \u2013 Top-Down Dynamic Programming</b>: Once, again let\u2019s describe it in terms of state transition. If we need to find the value for some state say dp[n] and instead of starting from the base state that i.e dp[0] we ask our answer from the states that can reach the destination state dp[n] following the state transition relation, then it is the top-down fashion of DP.<br> Here, we start our journey from the top most destination state and compute its answer by taking in count the values of states that can reach the destination state, till we reach the bottom-most base state"]),step1:s.W.setTitleDescription("Step 1: How to classify a problem as a Dynamic Programming Problem?","Typically, all the problems that require maximizing or minimize certain quantities or counting problems that say to count the arrangements under certain conditions or certain probability problems can be solved by using Dynamic Programming.<br> All dynamic programming problems satisfy the overlapping subproblems property and most of the classic dynamic problems also satisfy the optimal substructure property. Once, we observe these properties in a given problem, be sure that it can be solved using DP"),step2:s.W.setTitleDescription("Step 2: Deciding the state","DP problems are all about state and their transition. This is the most basic step which must be done very carefully because the state transition depends on the choice of state definition you make. So, let\u2019s see what do we mean by the term \u201cstate\u201d.<br> State A state can be defined as the set of parameters that can uniquely identify a certain position or standing in the given problem. This set of parameters should be as small as possible to reduce state space.<br> For example: In our famous Knapsack problem, we define our state by two parameters index and weight i.e DP[index][weight]. Here DP[index][weight] tells us the maximum profit it can make by taking items from range 0 to index having the capacity of sack to be weight. Therefore, here the parameters index and weight together can uniquely identify a subproblem for the knapsack problem<br>So, our first step will be deciding a state for the problem after identifying that the problem is a DP problem <br> As we know DP is all about using calculated results to formulate the final result. So, our next step will be to find a relation between previous states to reach the current state"),step3:s.W.setTitleDescription("Step 3: Formulating a relation among the states","This part is the hardest part of solving a DP problem and requires a lot of intuition, observation, and practice"),step4:s.W.setTitleDescription("Step 4: Adding memoization or tabulation for the state","This is the easiest part of a dynamic programming solution. We just need to store the state answer so that next time that state is required, we can directly use it from our memory")};var r=a(8720);const m=[{path:"",component:(()=>{class t{constructor(){this.dpMetaData=n}ngOnInit(){}}return t.\u0275fac=function(e){return new(e||t)},t.\u0275cmp=r.Xpm({type:t,selectors:[["app-dynamic-programming-algorithm"]],decls:11,vars:7,consts:[[1,"text-center"],[1,"mt-md-4","mt-3",3,"innerHtml"],[1,"mt-md-4","mt-3"]],template:function(t,e){1&t&&(r.TgZ(0,"h1",0),r._uU(1,"Dynamic Programming"),r.qZA(),r._UZ(2,"div",1),r._UZ(3,"div",1),r._UZ(4,"div",1),r.TgZ(5,"h4",2),r._uU(6,"How to solve a Dynamic Programming Problem"),r.qZA(),r._UZ(7,"div",1),r._UZ(8,"div",1),r._UZ(9,"div",1),r._UZ(10,"div",1)),2&t&&(r.xp6(2),r.Q6J("innerHtml",e.dpMetaData.defination,r.oJD),r.xp6(1),r.Q6J("innerHtml",e.dpMetaData.characteristics,r.oJD),r.xp6(1),r.Q6J("innerHtml",e.dpMetaData.terminologies,r.oJD),r.xp6(3),r.Q6J("innerHtml",e.dpMetaData.step1,r.oJD),r.xp6(1),r.Q6J("innerHtml",e.dpMetaData.step2,r.oJD),r.xp6(1),r.Q6J("innerHtml",e.dpMetaData.step3,r.oJD),r.xp6(1),r.Q6J("innerHtml",e.dpMetaData.step4,r.oJD))},styles:[""]}),t})()}];let l=(()=>{class t{}return t.\u0275fac=function(e){return new(e||t)},t.\u0275mod=r.oAB({type:t}),t.\u0275inj=r.cJS({imports:[[i.Bz.forChild(m)],i.Bz]}),t})(),p=(()=>{class t{}return t.\u0275fac=function(e){return new(e||t)},t.\u0275mod=r.oAB({type:t}),t.\u0275inj=r.cJS({imports:[[o.ez,l]]}),t})()}}]);